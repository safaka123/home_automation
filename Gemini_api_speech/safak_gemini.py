# # -*- coding: utf-8 -*-
# """SAFAK_Gemini.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1KZq9-RDg7jmgkQJ6Dnxyu1tZp_wtAF4-
# """
# import serial
# import base64
# import time
# import os
# from pathlib import Path

# #global decoded_text=""
# strveri= ""


# main_folder = Path(__file__).parent
# # Seri portu aç
# ser = serial.Serial('COM10', baudrate=9600, timeout=None)  # 'COM10' yerine doğru portu gir

# # yardımcı fonksiyonlar

# def prompt_oku():
#   with open(main_folder / "prompt.txt", "r") as f:
#       text = f.read()
#   return text

# def api_oku():
#   with open(main_folder / "api_key.txt", "r") as f:
#       api = f.read()
#   return api

# prompt = prompt_oku()
# api_key = api_oku()

# import pandas as pd

# log = pd.read_csv(main_folder / "log.csv")
# result = log.to_dict(orient='records')
# # print(result)
# r = []
# for i in result:
#   #print(i)
#   r.append(i)


# def prompt_doldur(prompt):
#     sent = result[0:]
#     doldur = prompt % (sent)
#     return doldur

# log = prompt_doldur(prompt)
# #print(log)

# log = pd.read_csv(main_folder / "log.csv")
# result = log.to_dict(orient='records')
# # print(result)
# r = []
# for i in result:
# #  print(i)
#   r.append(i)
# #  print(r)

# #==========================================================
# def seriverial():
#   global strveri
#   veri_alindi = False

#   while not veri_alindi:
#       if ser.in_waiting > 0:  # Seri portta veri varsa
#           data = ser.readline(ser.in_waiting)  # Gelen veriyi oku
#           print("Veri alındı:", data.decode('utf-8'))
        
#           # Base64 çözümleme
#           try:
#               decoded_bytes = base64.b64decode(data)
#               decoded_text = decoded_bytes.decode('utf-8')
#               print("Çözümlenmiş metin:", decoded_text)
#               strveri = decoded_text
#               veri_alindi = True
#           except Exception as e:
#               print(f"Hata oluştu: {e}")
#               veri_alindi = True
#       else:
#           print("Veri bekleniyor...")
#       # Küçük bir bekleme ekleyelim (gereksiz yoğun işlemden kaçınmak için)
#   time.sleep(0.5)  # 500ms bekleme
#   return strveri



# #=============================================================

# veri = seriverial()

# if veri:
#   komut = veri
#   prompt_1 = "Ev otomasyonu alanında bana yardımcı olan bir ev asistanısın. Sana gönderdiğim komut ne ise karşılığında bir cevap vermelisin. 50 karakteri geçmemeli."
#   prompt_2 = "Karar verirken aşağıdakı log verilerinin durumuna göre komuta cevap ver. Log verileri: "
#   komut = "Ortam sıcaklığı kaç bunu ekrana yaz eğer 15 değilse onu 15'e ayarla."
#   birles = prompt_1 + komut + prompt_2 + str(r)
#   birles

#   from google import genai

#   client = genai.Client(api_key="AIzaSyDJjRmTpIefy-WN7SyLbkfLbVCLnTgZQUw")

#   response = client.models.generate_content(
#       model="gemini-2.0-flash", contents=birles,
#   )
#   print("\n \r")
#   print(response.text)
# else:
#    print("veri alınamadı")


# # https://ai.google.dev/gemini-api/docs/audio?hl=tr Audio API


import serial
import base64
import time
import os
from pathlib import Path
import pandas as pd
from google import genai

# Değişkenler
strveri = ""  # Veri burada saklanacak

main_folder = Path(__file__).parent
# Seri portu aç
ser = serial.Serial('COM10', baudrate=9600, timeout=None)  # 'COM10' yerine doğru portu gir

# Yardımcı fonksiyonlar
def prompt_oku():
    with open(main_folder / "prompt.txt", "r") as f:
        text = f.read()
    return text

def api_oku():
    with open(main_folder / "api_key.txt", "r") as f:
        api = f.read()
    return api

prompt = prompt_oku()
api_key = api_oku()

log = pd.read_csv(main_folder / "log.csv")
result = log.to_dict(orient='records')
r = [i for i in result]

def prompt_doldur(prompt):
    sent = result[0:]
    doldur = prompt % (sent)
    return doldur

log = prompt_doldur(prompt)

# Seri porttan veri alımı işlemi
def seriverial():
    global strveri  # global olarak kullanacağız
    data_received = False  # Veri alındı mı kontrolü için bir bayrak
    
    while not data_received:
        if ser.in_waiting > 0:  # Seri portta veri varsa
            data = ser.readline(ser.in_waiting)
            print(ser.in_waiting)  # Gelen veriyi oku
            print("Veri alındı:", data.decode('utf-8'))
            #data_received = True
            if data:
                print(f"Veri raw hali: {data}")  # Raw veriyi göster

            # Base64 çözümleme
            try:
                decoded_bytes = base64.b64decode(data)
                decoded_text = decoded_bytes.decode('utf-8')
                print("Çözümlenmiş metin:", decoded_text)
                strveri = decoded_text  # strveri'yi güncelle
                print(f"Veri başarıyla alındı: {strveri}")  # Veri kontrolü
                data_received = True  # Veri başarıyla alındı, bayrağı True yap
            except Exception as e:
                print(f"Hata oluştu: {e}")
                data_received = True  # Hata durumunda da bayrağı True yapıyoruz

        else:
            print("Veri bekleniyor...")
        
        # Küçük bir bekleme ekleyelim (gereksiz yoğun işlemden kaçınmak için)
        time.sleep(0.5)  # 500ms bekleme

# Seriden veri alındıktan sonra işlemi başlat
seriverial()  # seriverial fonksiyonunu çalıştır

# Eğer veri alındıysa, işlemi yap
if strveri:
    komut = strveri  # Veri burada komuta aktarılacak
    prompt_1 = "Ev otomasyonu alanında bana yardımcı olan bir ev asistanısın. Sana gönderdiğim komut ne ise karşılığında bir cevap vermelisin. 50 karakteri geçmemeli."
    prompt_2 = "Karar verirken aşağıdaki log verilerinin durumuna göre komuta cevap ver. Log verileri: "
    birles = prompt_1 + komut + prompt_2 + str(r)
    print("Birleşmiş komut: ", birles)

    # API ile iletişim
    client = genai.Client(api_key="AIzaSyDn3KMxg5ema5OY_lYVyToREOEe5CwPeJg")

    response = client.models.generate_content(
        model="gemini-2.0-flash", contents=birles,
    )
    print("\n \r")
    print(response.text)
else:
    print("Veri alınamadı, işlem yapılamaz.")
